(ns leiningen.repack.push
  (:require [leiningen.core.project :as project]
            [clojure.java.io :as io]
            [leiningen.repack.install :as install]
            [leiningen.repack.manifest :as manifest]
            [leiningen.repack.data.sort :as sort]
            [leiningen.repack.data.io :refer [interim-path]]
            [leiningen.jar :as jar]
            [leiningen.pom :as pom]
            [leiningen.push :as push])
  (:import [com.jcraft.jsch JSch JSchException Logger]))

(defn push-jar
 "Push a jar to the Clojars.org repository over scp"
 [project & [repo]]
 (when (System/getProperty "scp.verbose")
   (JSch/setLogger (proxy [Logger] []
                     (isEnabled [level] true)
                     (log [level message] (println level message)))))
 (let [jarfile (jar/get-jar-filename project)
       targetpath (.getParentFile (io/file jarfile))
       pomfile (io/file (:root project) "pom.xml")]
   (pom/pom project)
   (jar/jar project)
   (try
    (push/scp-send repo pomfile jarfile)
    (catch JSchException e
      (.printStackTrace e)
      (when (= (.getMessage e) "Auth fail")
        (println
         (str
          "\nIf you're having trouble authenticating, try using\n"
          "a key generated by 'lein keygen'.  lein-clojars doesn't\n"
          "work yet with DSA or passphrased keys. You can also push directly with scp:\n\n"
          "lein pom\n"
          "scp " pomfile " " jarfile " clojars@clojars.org:" )))))))

(defn push [project]
  (install/install project)
  (let [manifest (manifest/create project)
        subprojects (-> manifest sort/topsort-branch-deps flatten distinct)]
      (doseq [entry subprojects]
        (let [sproject (project/read (interim-path project "branches" (:id entry) "project.clj"))]
          (push-jar sproject)))
      (let [rproject (project/read (interim-path project "root" "project.clj"))]
        (push-jar rproject))))